#!python
print('Wavefront variants Python based configure script')
print('Copyright (C) 2021, David Castells-Rufas <david.castells@uab.cat>')
print('Universitat Autonoma de Barcelona')

import os


def sysexec(cmd):
    stream = os.popen(cmd)
    outStr = stream.read()
    lines = outStr.split('\n');
    return lines;

def whereis(cmd):
    str = "whereis {}".format(cmd)
    ret = sysexec(str)
    part = ret[0].split(':')
    return part[1]

def hasCUDASupport():
    return (len(whereis("nvcc")) > 0)

def hasOpenCLSupport():
    clincludes = 'find /usr/include/ | grep "CL/cl.h"'
    if (len(sysexec(clincludes)) > 0):
        return True
    else:
        return False
    

def hasFPGAPlatform():
    return False;

def getObjects():
    objs =  """wavefront.o LevDP.o LevDP2Cols.o WavefrontOriginal.o  \\
\tWavefrontOriginal2Cols.o WavefrontExtendPrecomputing.o  \\
\tWavefrontDiamond.o WavefrontDiamond2Cols.o WavefrontDynamicDiamond.o \\
\tWavefrontDynamicDiamond2Cols.o fasta.o PerformanceLap.o OCLUtils.o \\
\tOCLGPUWavefrontOriginal2Cols.o OCLFPGAWavefrontOriginal2Cols.o \\
\tOCLGPUWavefrontDynamicDiamond2Cols.o"""
    return objs;


print("--> Checking CUDA Support:\t{}".format( "[OK]" if (hasCUDASupport()) else "[None]"))
print("--> Checking OpenCL Support:\t{}".format( "[OK]" if (hasOpenCLSupport()) else "[None]"))
print("--> Checking FPGA Platform:\t{}".format( "[OK]" if (hasFPGAPlatform()) else "[None]"))

print("--> Generating Makefile")

# generate Makefile

f = open("Makefile", "w")

f.write("# Do not modify, this makefile was automatically created by the configure script\n")
f.write("OPTIMIZATION=-O2\n")
f.write("CFLAGS=-g -gdwarf-4\n")
f.write("OPENCL=-l OpenCL\n")
f.write("\n")
f.write("%.o: %.cpp\n")
f.write("\tg++  $(OPTIMIZATION) $(CFLAGS) -fpermissive -I . -c $< -o $@\n")
f.write("\n")
f.write("OBJECTS=" + getObjects() + "\n")

f.write("\n")
f.write("all: wavefront\n")
f.write("\n")

f.write("clean:\n")
f.write("\trm -f *.o\n")
f.write("\trm -f wavefront\n")
f.write("\n")
f.write("wavefront: $(OBJECTS)\n")
f.write("\tg++  $(OPTIMIZATION) $(CFLAGS) $(OBJECTS) $(OPENCL) -o wavefront\n")

f.close()

print("--> Done!")
print("Compile with make")
